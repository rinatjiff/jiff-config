FORMAT: 1A
HOST: http://jiff-config-db.herokuapp.com/api

# Jiff Config API


# Setup

* Fork https://bitbucket.org/Jiff_DT/jiff-navigator/fork

* Work off the src-develop branch

* Open terminal and type `gulp` in your work folder to monitor the changes

* Open new terminal tab and type `chrome --app=http://localhost:8888/release` 

* Do `Cmd` + `i` to open the inspector and resize your view window to `640x1136`


# Central/Develop Process

We are using a Central/Develop git flow process to push changes through production where :

`central https://{your_bitbucket_username}@bitbucket.org/Jiff_DT/jiff-navigator.git (fetch)`

`central https://{your_bitbucket_username}@bitbucket.org/Jiff_DT/jiff-navigator.git (push)`

And 

`origin https://rinatjiff@bitbucket.org/{your_username}/jiff-navigator.git (fetch)`

`origin https://rinatjiff@bitbucket.org/{your_username}/jiff-navigator.git (push)`

The steps are :

* Push to your origin

* Create a pull request to `central/src-develop`


# Demo Process

Here are the steps:

#### Backend:

* Create version
* Create user
* Create timelines
* Create notifications

#### Frontend:

* Create skin-{brand}
    * Include in style.less
    * Include {user}@{brand}.com in App.js
* Create custom vendor/program flows
    * Run `gulp createflow --fn flow_new_vendor` where new_vendor is the new vendor/program name 
    * Add images to `images/flow_new_vendor` where new_vendor is the new vendor/program name 



## Get config JSON [/]

Use this endpoint to generate the main config.json to drop in your jsons folder.

### get config [GET]

+ Response 200 (application/json)

        {
            "mode": "dev",
            "username": "...",
            "place": 1,
            "paths": {
                "paths_id": "original",
                "central": "jiff-navigator",
                "prod": "jiff-prod",
                "release": "release",
                "base": "...",
                "dropbox": "...",
                "place": 1
            },
            "versions":"...",
            "menu_items":"...",
            "store":"...",
            "cards":"...",
            "action_cards":"...",
            "questions":"...",
            "rewards_center":"...",
            "onboarding_questions":"...",
            "interests":"...",
            "programs":"..."
        }


## Get card types [/cardtypes]

Use this endpoint to get the list of supported home stream card types.

### get card types [GET]

+ Response 200 (application/json)

        [
            {
                "name": "program",
                "place": 1
            },
            {
                "name": "article",
                "place": 2
            }
        ]


## Get user events [/timelines/{?username}]

Use this endpoint to get all home stream events of a specific user.

### get user timelines [GET]

+ Parameters
    + username (string) - user name (lowercase)

+ Response 200 (application/json)

        [
          {
            "username": "leo harper",
            "time": 2,
            "card": "premise_health_flu_shot",
            "initial_points": 0,
            "final_points": 0,
            "place": 213
          },
          {
            "username": "leo harper",
            "time": 0,
            "card": "welcome",
            "initial_points": 0,
            "final_points": 0,
            "place": 213
          }
        ]


## Get user notifications [/notifications/{?username}]

Use this endpoint to get all push notifications of a specific user.

### get user push notifications [GET]

+ Parameters
    + username (string) - user name (lowercase)

+ Response 200 (application/json)

        [
          {
            "username": "leo harper",
            "time": 2,
            "card": "premise_health_flu_shot",
            "initial_points": 0,
            "final_points": 0,
            "place": 213
          },
          {
            "username": "leo harper",
            "time": 0,
            "card": "welcome",
            "initial_points": 0,
            "final_points": 0,
            "place": 213
          }
        ]

## Create version [/create/version/{?name,blackstatusbar,dashboard,tabs,defaulttab,menu,menu_style,logo,rewards_center,web,background_web,displayed_name,place,video_name,has_terms,has_phone,on_boarding,personal_assessment}]

Use this endpoint to create a new version.

### create [GET]

+ Parameters
    + name (string) - version name (snake_case)
    + blackstatusbar (boolean, optional) - statusbar type
        + default: true
    + dashboard (boolean, optional) - activate home stream
        + default: false
    + tabs (array[string]) - list of footer tabs
    + defaulttab (string, optional) - first tab after recommendation
    + menu (array[string]) - list of more menu items
    + menu_style (string, optional) - "dark" or "light" style
        + default: "light"
    + logo (string, optional) - image name (png, jpg or svg)
    + rewards_center(string, optional) - wip
    + web (boolean, optional) - wip
        + default: false
    + background_web (string, optional) - wip
    + displayed_name (string, optional) - version name (display friendly)
    + place (number, optional) - order
    + video_name (string, optional) - intro video name
    + has_terms (boolean, optional) - disable terms screen
    + has_phone (boolean, optional) - disable phone capabilities
    + on_boarding (array[string]) - list of slide names
    + personal_assessment (boolean,optional) - disable health assessment
        + default: true

+ Response 200 (application/json)

        [
          {
            "name": "test2",
            "blackstatusbar": true,
            "dashboard": false,
            "tabs": null,
            "defaulttab": null,
            "menu": null,
            "menu_style": "light",
            "logo": null,
            "rewards_center": null,
            "web": false,
            "background_web": null,
            "displayed_name": null,
            "place": 58,
            "video_name": null,
            "has_terms": null,
            "has_phone": null,
            "on_boarding": null,
            "personal_assessment": true
          }
        ]


## Create user [/create/user/{?name,maxtimelines,version,dob,feet,inch,lbs,zip,timeline,total,sex,lp,onboarding_questions,interests,explore_types,explore_sections,rewards,hsa,store,credit,place,recommended_programs,enrolled_programs,additional_programs,emails}]

Use this endpoint to create a new user.

### create [GET]

+ Parameters
    + name (string) - version name (lowercase)
    + maxtimelines (number, optional) - max number of timelines
    + version (string, optional) - version name user belongs to
    + dob (number, optional) - date of birth (year/month/day)
    + feet (number, optional) - height (.ft)
    + inch (number, optional) - height (.in)
    + lbs (number, optional) - weight (.lbs)
    + zip (number, optional) - zip code
    + timeline (number, optional) - default timeline index
    + total (number, optional) - deprecated
    + sex (string, optional) - gender (f or m)
    + lp (string, optional) - custom landing page
    + onboarding_questions (array[string], optional) - list of question ids 
    + interests (array[string], optional) - list of interests
    + explore_types (array[string], optional) - list of explore section types
    + explore_sections (array[string], optional) - list of explore sections ("program_ids_list","tab_ids_list")
    + rewards (array[string], optional) - list of reward ids
    + hsa (boolean, optional) - unlock rewards by buying hsa first
        + default: false
    + store (array[string], optional) - list product ids
    + credit (number, optional) - deprecated
    + place (number, optional) - order
    + recommended_programs (array[string], optional) - list of recommended programs
    + enrolled_programs (array[string], optional) - list of enrolled programs
    + additional_programs (array[string], optional) - list of additional programs
    + emails (array[string], optional) - list of email ids
    
    


+ Response 200 (application/json)

        {
            "name": "ellis stevens",
            "maxtimelines": 3,
            "version": "datacore",
            "dob": "1990-04-03T00:00:00.000Z",
            "feet": 5,
            "inch": 9,
            "lbs": 175,
            "zip": 94043,
            "timeline": 0,
            "total": 2500,
            "sex": "m",
            "lp": null,
            "onboarding_questions": null,
            "interests": null,
            "explore_types": [
                "search",
                "programs",
                "resources",
                "list"
            ],
            "explore_sections": [
                "",
                "",
                "bcbs_BR,delta_dental,vsp,employee_assistance",
                "content_center,event_center,store,newsfeed"
            ],
            "rewards": [
                "pw_20",
                "hsa_100",
                "cycling_kit",
                "buy_nutribullet",
                "buy_amazon",
                "buy_rei",
                "buy_jiff",
                "buy_spaweek",
                "buy_netflix",
                "buy_platejoy",
                "raffle_tdf",
                "raffle_rio",
                "raffle_yoga",
                "charity_MOD",
                "charity_DWB",
                "charity_STC",
                "charity_TIT"
            ],
            "hsa": false,
            "store": [
                "healthkit_app",
                "fitbit_blaze",
                "fitbit_alta",
                "caloryguard",
                "garmin_vivoactive",
                "misfit_shine",
                "fitbit_aria",
                "withings_activite",
                "moves_app"
            ],
            "credit": 40,
            "place": 23,
            "recommended_programs": [
                "get_active",
                "hello_wallet",
                "zipongo",
                "sleep_soundly_generic"
            ],
            "enrolled_programs": [
                "quest",
                "hra"
            ],
            "additional_programs": [
                "mequilibrium"
            ],
            "emails": null
        }




## Create card [/create/card/{?id,title,subtitle,description,icon,background,cardtype,articles,cta,month,day,likes,comments,time,target,epilogue,epilogue_cta,place,epilogue_target,description_dashboard,epilogue_dashboard,details_dsc,details_footer,details_target,details_title,details_cta,amount,notifications,deductible,joined,thank_you_icon}]

Use this endpoint to create a new home stream card.

### create [GET]

+ Parameters
    + id (string) - card name (snake_case)
    + title (string, optional) - title
    + subtitle (string, optional) - subtitle
    + description (string, optional) - description
    + icon (string, optional) - icon
    + background (string, optional) - background
    + cardtype (string) - type (check get card types)
    + articles (array[string], optional) - list of aricle ids
    + cta (array[string], optional) - list of ctas
    + month (string, optional) - event month (3 first letters of the month in uppercase)
    + day (number, optional) - event day
    + likes (number, optional) - event number of likes
    + comments (number, optional) - event number of comments
    + time (string, optional) - event time of last comment
    + target (string, optional) - target id
    + epilogue (string, optional) - epilogue
    + epilogue_cta (string, optional) - epilogue cta
    + place (number, optional) - order
    + epilogue_target (string, optional) - epilogue target id
    + description_dashboard (string, optional) - subline in progress
    + epilogue_dashboard (string, optional) - subline in progress when target flow has ended
    + details_dsc (string, optional) - wip
    + details_footer (string, optional) - wip
    + details_target (string, optional) - wip
    + details_title (string, optional) - wip
    + details_cta (string, optional) - wip
    + amount (string, optional) - wip (vision demo)
    + notifications (string, optional) - wip (vision demo)
    + deductible (string, optional) - wip (vision demo)
    + joined (string, optional) - wip (vision demo)
    + thank_you_icon (string, optional) - wip (vision demo)
    
    
    


+ Response 200 (application/json)

        {
            "id": "articles_back",
            "title": "Recommended for You",
            "subtitle": null,
            "description": null,
            "icon": null,
            "background": null,
            "cardtype": "articles",
            "articles": [
                "back_article",
                "article_surprising_high_fiber_foods",
                "heart_superfoods"
            ],
            "cta": null,
            "month": null,
            "day": null,
            "likes": null,
            "comments": null,
            "time": null,
            "target": null,
            "epilogue": null,
            "epilogue_cta": null,
            "place": 202,
            "epilogue_target": null,
            "description_dashboard": null,
            "epilogue_dashboard": null,
            "details_dsc": null,
            "details_footer": null,
            "details_target": null,
            "details_title": null,
            "details_cta": null,
            "amount": null,
            "notifications": null,
            "deductible": null,
            "joined": null,
            "thank_you_icon": null
        }

## Create user event [/create/timelines/{?username,time,card,initial_points,final_points,place}]

Use this endpoint to create a new user event for the home stream

### create [GET]

+ Parameters
    + username (string) - user name (lowercase)
    + time (number) - index (lowercase)
    + card (string) - home stream card id
    + initial_points (string, optional) - deprecated
    + final_points (string, optional) - deprecated
    + place (number, optional) - order
    
    
    


+ Response 200 (application/json)

        [
            {
                "username": "jennifer liberty",
                "time": 0,
                "card": "quest_schedule_screening",
                "initial_points": 0,
                "final_points": 0,
                "place": 3
            },
            {
                "username": "jennifer liberty",
                "time": 0,
                "card": "step_into_spring_start",
                "initial_points": 0,
                "final_points": 0,
                "place": 4
            }
        ]



## Create push notification [/create/notification/{?username,time,title,description,target,place}]

Use this endpoint to create a new push notification

### create [GET]

+ Parameters
    + username (string) - user name (lowercase)
    + time (number) - index (lowercase)
    + title (string, optional) - title
    + description (string, optional) - description
    + target (string, optional) - wip
    + place (number, optional) - order
    
    
    


+ Response 200 (application/json)

        [
            {
                "username": "tina fey",
                "time": 1,
                "title": "Jiff",
                "description": "Your biometrics results are in. Let's see how you did.",
                "target": null,
                "place": 8
            },
            {
                "username": "tina fey",
                "time": 2,
                "title": "Jiff",
                "description": "Hi, moms!  Waitlist spots are now available in the childcare center, don't forget to apply!",
                "target": null,
                "place": 9
            },
        ]


## Create reward [/create/reward/{?id,short_title,status,points,image,details_title,details_content,categories}]

Use this endpoint to create a new reward

### create [GET]

+ Parameters
    + id (string) - id (snake_case)
    + short_title (string, optional) - short title for list view
    + status (string, optional) - button label 
    + points (number, optional) - value points
    + image (string, optional) - image
    + details_title (string, optional) - title for details page
    + details_content (string, optional) - description for details page
    + categories (array[string], optional) - categories


+ Response 200 (application/json)

        [
              {
                "id": "test_test",
                "short_title": null,
                "status": null,
                "points": null,
                "image": null,
                "details_title": null,
                "details_content": "cool's",
                "categories": null,
                "place": 25
              }
        ]


    
## Create program [/create/program/{?id,name,image,description,opening,flow,color,subtitle,type,phone,email,app,website}]

Use this endpoint to create a new program

### create [GET]

+ Parameters
    + id (string) - id (snake_case)
    + name (string, optional) - name
    + image (string, optional) - image
    + description (string, optional) - description
    + opening (string, optional) - deprecated
    + flow (string, optional) - deprecated
    + color (string, optional) - deprecated
    + subtitle (string, optional) - subtitle
    + type (string, optional) - program
    + phone (string, optional) - phone number
    + email (string, optional) - email
    + app (string, optional) - app url
    + website (string, optional) - website url
    

    
    


+ Response 200 (application/json)

         [
              {
                "id": "test",
                "name": "test",
                "image": null,
                "description": "I'm a test",
                "opening": null,
                "flow": null,
                "color": null,
                "subtitle": null,
                "type": "program",
                "phone": null,
                "email": null,
                "app": null,
                "website": null,
                "place": 94
              }
        ]


## Create question [/create/question/{?id,question,answers,multichoice,feedback,cta,target,icon}]

Use this endpoint to create a new program

### create [GET]

+ Parameters
    + id (string) - id (snake_case)
    + question (string, optional) - question details
    + answers (array[string], optional) - list of answers
    + multichoice (string, optional) - enable multichoice
    + feedback (string, optional) - only for last card
    + cta (string, optional) - only for last card 
    + target (string, optional) - target flow
    + icon (string, optional) - only for last card
    

+ Response 200 (application/json)

        [
          {
            "id": "mind_section",
            "question": "Do you feel stressed?",
            "answers": [
              "Great",
              "Good",
              "Ok",
              "Bad",
              "Very Bad"
            ],
            "multichoice": false,
            "feedback": false,
            "place": 4,
            "cta": null,
            "target": null,
            "icon": null,
            "qid": 1
          },
          ...
        ]


## Update version [/update/version/{?name,blackstatusbar,dashboard,tabs,defaulttab,menu,menu_style,logo,rewards_center,web,background_web,displayed_name,place,video_name,has_terms,has_phone,on_boarding,personal_assessment}]

Use this endpoint to update a version.

### update [GET]

+ Parameters
    + name (string) - version name (snake_case)
    + blackstatusbar (boolean, optional) - statusbar type
        + default: true
    + dashboard (boolean, optional) - activate home stream
        + default: false
    + tabs (array[string], optional) - list of footer tabs
    + defaulttab (string, optional) - first tab after recommendation
    + menu (array[string], optional) - list of more menu items
    + menu_style (string, optional) - "dark" or "light" style
        + default: "light"
    + logo (string, optional) - image name (png, jpg or svg)
    + rewards_center(string, optional) - wip
    + web (boolean, optional) - wip
        + default: false
    + background_web (string, optional) - wip
    + displayed_name (string, optional) - version name (display friendly)
    + place (number, optional) - order
    + video_name (string, optional) - intro video name
    + has_terms (boolean, optional) - disable terms screen
    + has_phone (boolean, optional) - disable phone capabilities
    + on_boarding (array[string], optional ) - list of slide names
    + personal_assessment (boolean, optional) - disable health assessment
        + default: true


+ Response 200 (application/json)

        [
          {
            "name": "test",
            "blackstatusbar": true,
            "dashboard": false,
            "tabs": null,
            "defaulttab": null,
            "menu": null,
            "menu_style": "light",
            "logo": null,
            "rewards_center": null,
            "web": false,
            "background_web": null,
            "displayed_name": null,
            "place": 58,
            "video_name": "test.mp4",
            "has_terms": null,
            "has_phone": null,
            "on_boarding": null,
            "personal_assessment": true
          }
        ]



## Update user [/update/user/{?name,maxtimelines,version,dob,feet,inch,lbs,zip,timeline,total,sex,lp,onboarding_questions,interests,explore_types,explore_sections,rewards,hsa,store,credit,place,recommended_programs,enrolled_programs,additional_programs,emails}]

Use this endpoint to update a user.

### update [GET]

+ Parameters
    + name (string) - version name (lowercase)
    + maxtimelines (number, optional) - max number of timelines
    + version (string, optional) - version name user belongs to
    + dob (number, optional) - date of birth (year/month/day)
    + feet (number, optional) - height (.ft)
    + inch (number, optional) - height (.in)
    + lbs (number, optional) - weight (.lbs)
    + zip (number, optional) - zip code
    + timeline (number, optional) - default timeline index
    + total (number, optional) - deprecated
    + sex (string, optional) - gender (f or m)
    + lp (string, optional) - custom landing page
    + onboarding_questions (array[string], optional) - list of question ids 
    + interests (array[string], optional) - list of interests
    + explore_types (array[string], optional) - list of explore section types
    + explore_sections (array[string], optional) - list of explore sections ("program_ids_list","tab_ids_list")
    + rewards (array[string], optional) - list of reward ids
    + hsa (boolean, optional) - unlock rewards by buying hsa first
        + default: false
    + store (array[string], optional) - list product ids
    + credit (number, optional) - deprecated
    + place (number, optional) - order
    + recommended_programs (array[string], optional) - list of recommended programs
    + enrolled_programs (array[string], optional) - list of enrolled programs
    + additional_programs (array[string], optional) - list of additional programs
    + emails (array[string], optional) - list of email ids
    
    


+ Response 200 (application/json)

        {
            "name": "ellis stevens",
            "maxtimelines": 3,
            "version": "datacore",
            "dob": "1990-04-03T00:00:00.000Z",
            "feet": 5,
            "inch": 9,
            "lbs": 175,
            "zip": 94043,
            "timeline": 0,
            "total": 2500,
            "sex": "m",
            "lp": null,
            "onboarding_questions": null,
            "interests": null,
            "explore_types": [
                "search",
                "programs",
                "resources",
                "list"
            ],
            "explore_sections": [
                "",
                "",
                "bcbs_BR,delta_dental,vsp,employee_assistance",
                "content_center,event_center,store,newsfeed"
            ],
            "rewards": [
                "pw_20",
                "hsa_100",
                "cycling_kit",
                "buy_nutribullet",
                "buy_amazon",
                "buy_rei",
                "buy_jiff",
                "buy_spaweek",
                "buy_netflix",
                "buy_platejoy",
                "raffle_tdf",
                "raffle_rio",
                "raffle_yoga",
                "charity_MOD",
                "charity_DWB",
                "charity_STC",
                "charity_TIT"
            ],
            "hsa": false,
            "store": [
                "healthkit_app",
                "fitbit_blaze",
                "fitbit_alta",
                "caloryguard",
                "garmin_vivoactive",
                "misfit_shine",
                "fitbit_aria",
                "withings_activite",
                "moves_app"
            ],
            "credit": 40,
            "place": 23,
            "recommended_programs": [
                "get_active",
                "hello_wallet",
                "zipongo",
                "sleep_soundly_generic"
            ],
            "enrolled_programs": [
                "quest",
                "hra"
            ],
            "additional_programs": [
                "mequilibrium"
            ],
            "emails": null
        }


## Update card [/update/card/{?id,title,subtitle,description,icon,background,cardtype,articles,cta,month,day,likes,comments,time,target,epilogue,epilogue_cta,place,epilogue_target,description_dashboard,epilogue_dashboard,details_dsc,details_footer,details_target,details_title,details_cta,amount,notifications,deductible,joined,thank_you_icon}]

Use this endpoint to update a new home stream card.

### update [GET]

+ Parameters
    + id (string) - card name (snake_case)
    + title (string, optional) - title
    + subtitle (string, optional) - subtitle
    + description (string, optional) - description
    + icon (string, optional) - icon
    + background (string, optional) - background
    + cardtype (string, optional) - type (check get card types)
    + articles (array[string], optional) - list of aricle ids
    + cta (array[string], optional) - list of ctas
    + month (string, optional) - event month (3 first letters of the month in uppercase)
    + day (number, optional) - event day
    + likes (number, optional) - event number of likes
    + comments (number, optional) - event number of comments
    + time (string, optional) - event time of last comment
    + target (string, optional) - target id
    + epilogue (string, optional) - epilogue
    + epilogue_cta (string, optional) - epilogue cta
    + place (number, optional) - order
    + epilogue_target (string, optional) - epilogue target id
    + description_dashboard (string, optional) - subline in progress
    + epilogue_dashboard (string, optional) - subline in progress when target flow has ended
    + details_dsc (string, optional) - wip
    + details_footer (string, optional) - wip
    + details_target (string, optional) - wip
    + details_title (string, optional) - wip
    + details_cta (string, optional) - wip
    + amount (string, optional) - wip (vision demo)
    + notifications (string, optional) - wip (vision demo)
    + deductible (string, optional) - wip (vision demo)
    + joined (string, optional) - wip (vision demo)
    + thank_you_icon (string, optional) - wip (vision demo)
    
    
    


+ Response 200 (application/json)

        {
            "id": "articles_back",
            "title": "Recommended for You",
            "subtitle": null,
            "description": null,
            "icon": null,
            "background": null,
            "cardtype": "articles",
            "articles": [
                "back_article",
                "article_surprising_high_fiber_foods",
                "heart_superfoods"
            ],
            "cta": null,
            "month": null,
            "day": null,
            "likes": null,
            "comments": null,
            "time": null,
            "target": null,
            "epilogue": null,
            "epilogue_cta": null,
            "place": 202,
            "epilogue_target": null,
            "description_dashboard": null,
            "epilogue_dashboard": null,
            "details_dsc": null,
            "details_footer": null,
            "details_target": null,
            "details_title": null,
            "details_cta": null,
            "amount": null,
            "notifications": null,
            "deductible": null,
            "joined": null,
            "thank_you_icon": null
        }


## Update event [/update/timeline/{?username,time,card,initial_points,final_points,place,id}]

Use this endpoint to update an event by providing an event id

### update [GET]

+ Parameters
    + username (string, optional) - user name (lowercase)
    + time (number, optional) - index (lowercase)
    + card (string, optional) - home stream card id
    + initial_points (string, optional) - deprecated
    + final_points (string, optional) - deprecated
    + place (number, optional) - order
    + id (number) - id selector
    
    


+ Response 200 (application/json)

        [
            {
                "username": "jennifer liberty",
                "time": 0,
                "card": "quest_schedule_screening",
                "initial_points": 0,
                "final_points": 0,
                "place": 3
            },
            {
                "username": "jennifer liberty",
                "time": 0,
                "card": "step_into_spring_start",
                "initial_points": 0,
                "final_points": 0,
                "place": 4
            }
        ]



## Update push notification [/update/notification/{?username,time,title,description,target,place,id}]

Use this endpoint to update a new push notification by providing a notification id

### update [GET]

+ Parameters
    + username (string) - user name (lowercase)
    + time (number) - index (lowercase)
    + title (string, optional) - title
    + description (string, optional) - description
    + target (string, optional) - wip
    + place (number, optional) - order
    + id (number) - id selector
    
    
    


+ Response 200 (application/json)

        [
            {
                "username": "tina fey",
                "time": 1,
                "title": "Jiff",
                "description": "Your biometrics results are in. Let's see how you did.",
                "target": null,
                "place": 8
            },
            {
                "username": "tina fey",
                "time": 2,
                "title": "Jiff",
                "description": "Hi, moms!  Waitlist spots are now available in the childcare center, don't forget to apply!",
                "target": null,
                "place": 9
            },
        ]
        
        


## Update reward [/update/reward/{?short_title,status,points,image,details_title,details_content,categories,place,id}]

Use this endpoint to update an existing reward

### update [GET]

+ Parameters
    + short_title (string, optional) - short title for list view
    + status (string, optional) - button label 
    + points (number, optional) - value points
    + image (string, optional) - image
    + details_title (string, optional) - title for details page
    + details_content (string, optional) - description for details page
    + categories (array[string], optional) - categories
    + place (number, optional) - order
    + id (string) - id (snake_case)_test

    
    
    


+ Response 200 (application/json)

        [
              {
                "id": "test_test",
                "short_title": null,
                "status": null,
                "points": null,
                "image": null,
                "details_title": null,
                "details_content": "cool's",
                "categories": null,
                "place": 25
              }
        ]


## Update program [/update/program/{?name,image,description,opening,flow,color,subtitle,type,phone,email,app,website,place,id}]

Use this endpoint to update an existing program

### update [GET]

+ Parameters
    + name (string, optional) - name
    + image (string, optional) - image
    + description (string, optional) - description
    + opening (string, optional) - deprecated
    + flow (string, optional) - deprecated
    + color (string, optional) - deprecated
    + subtitle (string, optional) - subtitle
    + type (string, optional) - program
    + phone (string, optional) - phone number
    + email (string, optional) - email
    + app (string, optional) - app url
    + website (string, optional) - website url
    + place (number, optional) - order
    + id (string) - id (snake_case)
    

    
    


+ Response 200 (application/json)

         [
              {
                "id": "test",
                "name": "test",
                "image": null,
                "description": "I'm a test",
                "opening": null,
                "flow": null,
                "color": null,
                "subtitle": null,
                "type": "program",
                "phone": null,
                "email": null,
                "app": null,
                "website": null,
                "place": 94
              }
        ]


## Update question [/update/question/{?id,question,answers,multichoice,feedback,cta,target,icon,place,qid}]

Use this endpoint to create a new program

### Update [GET]

+ Parameters
    + id (string, optional) - id (snake_case)
    + question (string, optional) - question details
    + answers (array[string], optional) - list of answers
    + multichoice (string, optional) - enable multichoice
    + feedback (string, optional) - only for last card
    + cta (string, optional) - only for last card 
    + target (string, optional) - target flow
    + icon (string, optional) - only for last card
    + place (number, optional) - order
    + qid (number) - question id
    

+ Response 200 (application/json)

        [
          {
            "id": "mind_section",
            "question": "Do you feel stressed?",
            "answers": [
              "Great",
              "Good",
              "Ok",
              "Bad",
              "Very Bad"
            ],
            "multichoice": false,
            "feedback": false,
            "place": 4,
            "cta": null,
            "target": null,
            "icon": null,
            "qid": 1
          }
        ]

## Delete event [/delete/timeline/{?id}]

Use this endpoint to delete an event by providing an event id

### update [GET]

+ Parameters
    + id (number) - id selector
    
    


+ Response 200 (application/json)

        {
          "message": "1174 was deleted"
        }


    